{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass FlappyBirdGame {\n    startGame() {\n        requestAnimationFrame(this.game.bind(this));\n        this.SCOREBOARDUPDATEINTERVALID = setInterval(()=>{\n            this.score.innerText = `${this.gameScore}`;\n            this.gameScore += 1;\n        }, 100);\n    }\n    valueRefactor(v) {\n        return v / this.minScreenSize * this.canvasSize;\n    }\n    generateGapPos() {\n        let x = this.canvasSize - (this.birdSize * 2 + this.pillarGapHeight);\n        return this.birdSize + Math.random() * x;\n    }\n    flap() {\n        this.velocity.y = this.velocityOnFlap.y;\n        this.velocity.a = this.velocityOnFlap.a;\n    }\n    minifyAngle(angle) {\n        while(angle >= this.fullAngle){\n            angle -= this.fullAngle;\n        }\n        while(angle <= -this.fullAngle){\n            angle += this.fullAngle;\n        }\n        return angle;\n    }\n    game(timestamp) {\n        // dt analysis\n        if (this.lastTime == 0) {\n            this.lastTime = timestamp;\n        }\n        let dt = timestamp - this.lastTime;\n        this.lastTime = timestamp;\n        // clearing previous shit\n        this.ctx.clearRect(0, 0, this.canvasSize, this.canvasSize);\n        // this.ctx.drawImage(this.backgroundImage, 0, 0, this.canvasSize, this.canvasSize)\n        // this.ctx.fillStyle = this.skyGradient\n        // this.ctx.fillRect(0, 0, this.canvasSize, this.skyHeight)\n        // this.ctx.fillStyle = this.groundGradient\n        // this.ctx.fillRect(0, this.skyHeight, this.canvasSize, this.groundHeight)\n        // drawing pillar\n        this.ctx.fillStyle = 'red';\n        for (let pillar of this.pillars){\n            this.ctx.fillRect(pillar.pos.x, pillar.pos.y, pillar.width, pillar.gapPos.y);\n            let v = pillar.gapPos.y + pillar.gapHeight;\n            this.ctx.fillRect(pillar.pos.x, v, pillar.width, pillar.height - v);\n            pillar.pos.x -= this.pillarVelocity * dt;\n        }\n        // iterating the pillar\n        let fp = this.pillars[this.firstPillar];\n        if (fp.pos.x < -this.pillarWidth) {\n            // let pillar = this.pillars.shift()!\n            fp.pos.x = this.pillars[this.lastPillar].pos.x + this.pillarGapUnitWidth;\n            fp.gapPos.y = this.generateGapPos();\n            this.firstPillar += 1;\n            this.lastPillar += 1;\n            if (this.firstPillar > this.totalPillar - 1) {\n                this.firstPillar = 0;\n            }\n            if (this.lastPillar > this.totalPillar - 1) {\n                this.lastPillar = 0;\n            }\n        }\n        // calculating vars w/ AnguloLinear Mechanics\n        this.velocity.y += this.acceleration.y * dt;\n        this.birdState.y += this.velocity.y * dt;\n        this.velocity.a += this.acceleration.a * dt;\n        this.birdState.a += this.velocity.a * dt;\n        // drawing the stuff\n        this.ctx.save();\n        this.ctx.translate(this.birdState.x + this.halfBirdSize, this.birdState.y + this.halfBirdSize);\n        this.ctx.rotate(this.birdState.a);\n        this.ctx.drawImage(this.birdImages[this.birdImagesIndex], -this.halfBirdSize, -this.halfBirdSize, this.birdSize, this.birdSize);\n        this.ctx.restore();\n        this.birdImagesIndex += 1;\n        if (this.birdImagesIndex >= this.totalBirdImages) {\n            this.birdImagesIndex = 0;\n        }\n        // check collision\n        fp = this.pillars[this.firstPillar];\n        let birdPillarDistance = this.birdStateEx - fp.pos.x;\n        if (birdPillarDistance >= 0 && birdPillarDistance < this.pillarWidth) {\n            if (this.birdState.y < fp.gapPos.y || this.birdState.y >= fp.gapPos.y + this.GHBSConstant) {\n                return this.gameOver();\n            }\n        }\n        // modulating variables\n        if (this.birdState.y < 0) {\n            this.birdState.y = 0;\n            this.velocity.y = 0;\n        } else if (this.birdState.y > this.freedom.y) {\n            return this.gameOver();\n            this.birdState.y = this.freedom.y;\n            this.velocity.y = 0;\n        }\n        if (this.birdState.a > this.freedom.a) {\n            this.birdState.a = this.freedom.a;\n            this.velocity.a = 0;\n        } else if (this.birdState.a < -this.freedom.a) {\n            this.birdState.a = -this.freedom.a;\n            this.velocity.a = 0;\n        }\n        requestAnimationFrame(this.game.bind(this));\n    }\n    gameOver() {\n        clearInterval(this.SCOREBOARDUPDATEINTERVALID);\n    }\n    constructor(){\n        _define_property(this, \"canvas\", document.getElementById('canvas'));\n        _define_property(this, \"ctx\", this.canvas.getContext('2d'));\n        _define_property(this, \"minScreenSize\", window.innerHeight > window.innerWidth ? window.innerWidth : window.innerHeight);\n        _define_property(this, \"canvasSize\", 500 > this.minScreenSize ? this.minScreenSize : 500);\n        _define_property(this, \"birdSize\", this.canvasSize / 12);\n        _define_property(this, \"halfBirdSize\", this.birdSize / 2);\n        _define_property(this, \"birdImages\", []);\n        _define_property(this, \"totalBirdImages\", 0);\n        _define_property(this, \"birdImagesIndex\", 0);\n        _define_property(this, \"backgroundImage\", void 0);\n        // pillar\n        _define_property(this, \"totalPillar\", 3);\n        _define_property(this, \"pillarWidth\", this.canvasSize / (2 * this.totalPillar - 1));\n        _define_property(this, \"pillars\", []);\n        _define_property(this, \"firstPillar\", 0);\n        _define_property(this, \"lastPillar\", this.totalPillar - 1);\n        _define_property(this, \"pillarVelocity\", this.valueRefactor(0.2));\n        _define_property(this, \"pillarGapHeight\", this.birdSize * 6);\n        _define_property(this, \"gapBetweenTwoPillarX\", this.pillarWidth * 1.5);\n        _define_property(this, \"pillarGapUnitWidth\", this.pillarWidth + this.gapBetweenTwoPillarX);\n        // velocity\n        _define_property(this, \"velocity\", {\n            x: 0,\n            y: 0,\n            a: 0\n        });\n        // acceleration\n        _define_property(this, \"acceleration\", {\n            x: 0,\n            y: this.valueRefactor(0.0009),\n            a: this.valueRefactor(0.000005)\n        });\n        _define_property(this, \"lastTime\", 0);\n        _define_property(this, \"birdState\", {\n            x: (this.pillarWidth * 1.5 - this.birdSize) / 2,\n            y: 0,\n            a: 0\n        });\n        _define_property(this, \"birdStateEx\", this.birdState.x + this.birdSize);\n        _define_property(this, \"freedom\", {\n            x: this.canvasSize - this.birdSize,\n            y: this.canvasSize - this.birdSize,\n            a: Math.PI / 4\n        });\n        _define_property(this, \"fullAngle\", Math.PI * 2);\n        _define_property(this, \"velocityOnFlap\", {\n            x: 0,\n            y: this.valueRefactor(-0.5),\n            a: this.valueRefactor(-0.003)\n        });\n        _define_property(this, \"totalResources\", 0);\n        _define_property(this, \"loadedResources\", 0);\n        _define_property(this, \"resourceCheckInterval\", void 0);\n        _define_property(this, \"skyHeight\", this.canvasSize * 0.7);\n        _define_property(this, \"groundHeight\", this.canvasSize - this.skyHeight);\n        _define_property(this, \"skyGradient\", this.ctx.createLinearGradient(0, 0, 0, this.skyHeight));\n        _define_property(this, \"groundGradient\", this.ctx.createLinearGradient(0, this.skyHeight, 0, this.canvasSize));\n        _define_property(this, \"GHBSConstant\", this.pillarGapHeight - this.birdSize);\n        _define_property(this, \"SCOREBOARDUPDATEINTERVALID\", 0);\n        _define_property(this, \"score\", document.getElementById('score'));\n        _define_property(this, \"gameScore\", 0);\n        console.log(this.canvasSize);\n        for(let i = 0; i < this.totalPillar; i += 1){\n            this.pillars.push({\n                pos: {\n                    x: this.canvasSize + i * this.pillarGapUnitWidth,\n                    y: 0\n                },\n                width: this.pillarWidth,\n                height: this.canvasSize,\n                gapHeight: this.pillarGapHeight,\n                gapPos: {\n                    x: 0,\n                    y: this.generateGapPos()\n                }\n            });\n        }\n        this.skyGradient.addColorStop(0, 'deepskyblue');\n        this.skyGradient.addColorStop(1, 'white');\n        this.groundGradient.addColorStop(0, 'yellowgreen');\n        this.groundGradient.addColorStop(1, 'darkgreen');\n        this.canvas.width = this.canvasSize;\n        this.canvas.height = this.canvasSize;\n        let birdImage1 = new Image();\n        birdImage1.src = 'flappy-bird-assets-master/sprites/bluebird-midflap.png';\n        this.totalResources += 1;\n        birdImage1.onload = (event)=>{\n            this.loadedResources += 1;\n        };\n        this.birdImages.push(birdImage1);\n        this.totalBirdImages += 1;\n        let birdImage2 = new Image();\n        birdImage2.src = 'flappy-bird-assets-master/sprites/bluebird-upflap.png';\n        this.totalResources += 1;\n        birdImage2.onload = (event)=>{\n            this.loadedResources += 1;\n        };\n        this.birdImages.push(birdImage2);\n        this.totalBirdImages += 1;\n        let birdImage3 = new Image();\n        birdImage3.src = 'flappy-bird-assets-master/sprites/bluebird-midflap.png';\n        this.totalResources += 1;\n        birdImage3.onload = (event)=>{\n            this.loadedResources += 1;\n        };\n        this.birdImages.push(birdImage3);\n        this.totalBirdImages += 1;\n        let birdImage4 = new Image();\n        birdImage4.src = 'flappy-bird-assets-master/sprites/bluebird-downflap.png';\n        this.totalResources += 1;\n        birdImage4.onload = (event)=>{\n            this.loadedResources += 1;\n        };\n        this.birdImages.push(birdImage4);\n        this.totalBirdImages += 1;\n        this.backgroundImage = new Image();\n        this.backgroundImage.src = 'flappy-bird-assets-master/sprites/background-day.png';\n        this.totalResources += 1;\n        this.backgroundImage.onload = (event)=>{\n            this.loadedResources += 1;\n        };\n        // check if the resources are fully loaded\n        this.resourceCheckInterval = setInterval(()=>{\n            if (this.totalResources == this.loadedResources) {\n                console.log('All resources loaded!');\n                clearInterval(this.resourceCheckInterval);\n                this.startGame();\n                this.canvas.onclick = this.flap.bind(this);\n            }\n        }, 500);\n    }\n}\nvar game = new FlappyBirdGame();\nconsole.log(game.birdImages.length);\nfor (let i of game.birdImages){\n    // document.appendChild(i)\n    console.log(i.src);\n}\n"],
  "mappings": "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",
  "names": []
}
